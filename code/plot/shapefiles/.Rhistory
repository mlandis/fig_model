gm_min_dist = matrix(0, ncol=n, nrow=n)
perim_share = matrix(0, ncol=n, nrow=n)
cent = gCentroid(x, byid=TRUE)
region_points = list()
# for (i in 1:n) {
#     ptx = st_make_grid(x[i,], cellsize=1)
#     pts = SpatialPoints(ptx)
#     region_points[[i]] = gIntersection(x[i,], pts)
# }
for (i in 1:n) {
area[i] = gArea(x[i,]) # raw area size per region
perim[i] = gLength(x[i,]) # raw perimeter length per region
cat(i,"\n")
y_i = as(gSimplify(x[i,], tol=0.25), "SpatialPolygonsDataFrame")
#pt_i = as(as(x[i,], "SpatialLinesDataFrame"), "SpatialPointsDataFrame")
pt_i = as(as(y_i, "SpatialLinesDataFrame"), "SpatialPointsDataFrame")
for (j in i:n) {
print(c(i,j))
if (i != j) {
shp_int_ij = gIntersection(x[i,], x[j,])
l_ij = 0
if (!is.null(shp_int_ij)) {
# raw shared perimeter length between regions
l_ij = gLength( shp_int_ij )
}
perim_share[i,j] = perim_share[j,i] = l_ij
# get min distance
cat("  ",j,"\n")
y_j = as(gSimplify(x[j,], tol=0.25), "SpatialPolygonsDataFrame")
#pt_j = as(as(x[j,], "SpatialLinesDataFrame"), "SpatialPointsDataFrame")
pt_j = as(as(y_j, "SpatialLinesDataFrame"), "SpatialPointsDataFrame")
print("before")
(dist <- gDistance(pt_i, pt_j, byid=TRUE))
print("after")
min_dist[i,j] = min_dist[j,i] = min(dist)
cent_dist[i,j] = cent_dist[j,i] = gDistance(cent[i], cent[j])
# min distance from centroid i to polygon j
#min_cent_dist[i,j] = min( gDistance(region_points[[i]], pt_j) )
#min_cent_dist[j,i] = min( gDistance(region_points[[j]], pt_i) )
print(c(i,j))
gm_min_dist[i,j] = get_gm_dist( x[i,], x[j,] )
gm_min_dist[j,i] = get_gm_dist( x[j,], x[i,] )
symm_gm_min_dist[i,j] = symm_gm_min_dist[j,i] =  ( gm_min_dist[i,j] * gm_min_dist[j,i] )^(1/2)
#                avg_dist[i] <- gDistance(pt_i, pt_j, byid=FALSE)
}
}
}
perim_prop = perim_share
for (i in 1:n) {
# proportion of total perimeter length that's shared between regions
perim_prop[i,] = perim_prop[i,] / perim[i]
}
# clean-up min dist
min_dist[ min_dist < max(min_dist)/100 ] = 0
# assign names to data structures
names(area) = region_names
names(perim) = region_names
rownames(perim_share) = colnames(perim_share) = region_names
rownames(perim_prop) = colnames(perim_prop) = region_names
rownames(min_dist) = colnames(min_dist) = region_names
rownames(cent_dist) = colnames(cent_dist) = region_names
rownames(gm_min_dist) = colnames(gm_min_dist) = region_names
rownames(symm_gm_min_dist) = colnames(symm_gm_min_dist) = region_names
ret = list( area=area,
perimeter=perim,
area_to_perimeter=area/perim,
perimeter_shared=perim_share,
perimeter_shared_proportion=perim_prop,
min_dist=min_dist,
gm_min_dist=gm_min_dist,
symm_gm_min_dist=symm_gm_min_dist,
cent_dist=cent_dist)
return(ret)
}
make_region_conn = function(x, islands) {
nn = names(x$area)
n = length(nn)
y = matrix(0, ncol=n, nrow=n)
rownames(y) = colnames(y) = nn
print(nn)
for (i in 1:n) {
for (j in 1:n) {
if ( nn[i] %in% islands | nn[j] %in% islands ) {
y[i,j] = y[j,i] = 0
} else {
y[i,j] = y[j,i] = 1
}
}
}
x$connectivity = data.frame(y)
return(x)
}
write_data = function(x, file_prefix) {
n = names(x)
for (i in 1:length(x)) {
xx = t(x[[ n[i] ]])
z = data.frame( xx )
z = round(z, digits=3)
fn = paste0( file_prefix, ".", n[i], ".txt" )
print(fn)
write.table( z, file=fn, sep=",", quote=F, row.names=F )
}
}
# file system
fp = "/Users/mlandis/projects/geosse_dating/data/emp/anolis/shapefiles/"
# get shapes
#### UNCOMMENT
shp = readOGR( dsn=fp, layer="aa" )
col_all = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','gold','#b15928','darkgray')
col_all[1:9] = c("firebrick3","gold","deepskyblue","darkorchid","forestgreen","blue","cyan","magenta","orange")
#shp = shp[ c(2,1,11,13,14,3,4,6,5,7,8,9,10), ]
#col_test = c("red","green","blue","magenta","cyan","gold","black","gray","purple","hotpink","yellow","forestgreen","dodgerblue")
#col_test = c(col_test, col_test)
shp_all_tmp= as(unionSpatialPolygons( shp, c(1,2,3,4,5,6,7,8,9,10,11,12,13) ), "SpatialPolygonsDataFrame")
shp_all = shp_all_tmp[ c(6,1,10,11,13,12,2,3,4,5,7,8,9), ]
#plot(shp_all,col=col_test,border=col_test)
name_all = c("NAm","CAmN", "CAmS", "Ch", "AndVal", "Andes", "Amaz", "LAnt", "PR", "Hisp", "Jam", "Cuba", "Bah")
shp_nr9 = as(unionSpatialPolygons( shp_all, c(1,1,2,3,3,4,5,6,6,8,7,7,9) ), "SpatialPolygonsDataFrame")
#plot(shp_nr9,col=col_test,border=col_test)
name_nr9 = c("NAm_CAmN","CAmS", "Choco_Caribe", "Andes", "Amaz", "LAnt_PR","Cuba_Cay_Jam", "Hisp",  "Bah")
conn_nr9 = matrix( nrow=length(name_nr9),ncol=length(name_nr9),byrow=T,
c(2,2,1,1,1,0,0,0,0,
2,2,2,1,1,0,0,0,0,
1,2,2,2,2,0,0,0,0,
1,1,2,2,2,0,0,0,0,
1,1,2,2,2,0,0,0,0,
0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0))
rownames(conn_nr9)=colnames(conn_nr9)=name_nr9
# collect extra info
#shp_island_info = make_region_info(shp_island, name_island)
#shp_island_info$connectivity = conn_island
#shp_cont_info = make_region_info(shp_cont, name_cont)
#shp_cont_info$connectivity = conn_cont
shp_nr9_info = make_region_info(shp_nr9, name_nr9)
?is.projected
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
shp_nr9_info
shp_nr9_info
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
shp_nr9_info
zz = shp_nr9_info
gDistance( zz[1]
)
gDistance( zz[[1]] )
zz[[1]]
gDistance( zz[[2]][1], zz[[3]], byid=T )
plot(ll[[1]])
ll[[1]]
ll
zz
plot(zz[[1]])
plot(zz[[2]])
plot(zz[[1]])
plot(zz[[2]])
plot(zz[[1]], zz[[2]])
plot(zz[[1]])
plot(zz[[2]], add=T)
plot(zz[[3]])
plot(zz[[4]])
gDistance(zz[[1]], zz[[3]])
gDistance(zz[[1]], zz[[3]], byid=T)
min( gDistance(zz[[1]], zz[[3]], byid=T) )
gDistance(zz[[1]], zz[[3]], byid=T)
zz[[1]][1]
zz[[1]][2]
zz[[1]][3]
zz[[1]][4]
zz[[1]]
plot(zz[[1]])
plot(zz[[1]][1], col="red", add=T)
plot(zz[[1]][2], col="red", add=T)
zz[[1]][1]
gDistance(zz[[1]][1], zz[[3]])
gDistance(zz[[1]][1], zz[[3]], byid=T)
min( gDistance(zz[[1]][1], zz[[3]], byid=T) )
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
shp_nr9_info
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
?plot(zz[[1]])
zz[[1]]
zz[[1]][,]1
zz[[1]][,1]
zz[[1]][1]
zz[[1]]@coords
zz[[1]]@coords
zz[[1]]@bbox
zz[[1]]@bbox[1,1]
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
xlim
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim)
plot( zz[[2]], add=T, col="red")
gDistance( zz[[1]][1], zz[[3]] )
gDistance( zz[[1]], zz[[3]] )
gDistance( zz[[1]][1], zz[[3]], byid=T )
which.min( gDistance( zz[[1]][1], zz[[3]], byid=T ) )
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[3]], add=T, col="red")
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
which.min( gDistance( zz[[1]][1], zz[[3]], byid=T ) )
which.min( gDistance( zz[[1]][1], zz[[4]], byid=T ) )
?lines
?segment
?segments
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
short_idx = which.min( gDistance( zz[[1]][1], zz[[4]], byid=T ) )
segments( zz[[1]][i,1], zz[[1]][i,2], zz[[4]][short_idx,1], zz[[4]][short_idx,2], col="blue")
}
short_idx = which.min( gDistance( zz[[1]][i], zz[[4]], byid=T ) )
gDistance(zz[[1]][1], zz[[4]], byid=T )
which.min( gDistance(zz[[1]][1], zz[[4]], byid=T ) )
zz[[4]][14,1]
zz[[4]]@coords
zz[[4]]@coords[14,1]
zz[[4]]@coords[14,2]
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
short_idx = which.min( gDistance( zz[[1]][i], zz[[4]], byid=T ) )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[4]]@coords[short_idx,1], zz[[4]]@coords[short_idx,2], col="blue")
}
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[4]]@coords[short_idx,1], zz[[4]]@coords[short_idx,2], col="blue", alpha=0.1)
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
# packages
library(sf)
library(rgeos)
library(rgdal)
library(landscapemetrics)
library(landscapetools)
library(maptools)
library(raster)
library(spdep)
library(spatstat)
library(ggplot2)
library(ggtree)
library(scales)
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
short_idx = which.min( gDistance( zz[[1]][i], zz[[4]], byid=T ) )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[4]]@coords[short_idx,1], zz[[4]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
short_idx = which.min( gDistance( zz[[1]][i], zz[[2]], byid=T ) )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[2]]@coords[short_idx,1], zz[[2]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
short_idx = which.min( gDistance( zz[[1]][i], zz[[2]], byid=T ) )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[2]]@coords[short_idx,1], zz[[2]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
xlim = c(min(zz[[1]]@bbox[1,1], zz[[2]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[2]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[2]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[2]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = gDistance( zz[[1]][i], zz[[2]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
#segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[2]]@coords[short_idx,1], zz[[2]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[4]]@coords[short_idx,1], zz[[4]]@coords[short_idx,4], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[4]]@coords[short_idx,1], zz[[4]]@coords[short_idx,4], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[4]]@coords[short_idx,1], zz[[4]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[2]]@bbox[1,1], zz[[3]]@bbox[1,1]), max(zz[[2]]@bbox[1,2], zz[[3]]@bbox[1,2]))
ylim = c(min(zz[[2]]@bbox[2,1], zz[[3]]@bbox[2,1]), max(zz[[2]]@bbox[2,2], zz[[3]]@bbox[2,2]))
plot( zz[[2]], xlim=xlim, ylim=ylim )
plot( zz[[3]], add=T, col="red")
xlim = c(min(zz[[2]]@bbox[1,1], zz[[3]]@bbox[1,1]), max(zz[[2]]@bbox[1,2], zz[[3]]@bbox[1,2]))
ylim = c(min(zz[[2]]@bbox[2,1], zz[[3]]@bbox[2,1]), max(zz[[2]]@bbox[2,2], zz[[3]]@bbox[2,2]))
plot( zz[[2]], xlim=xlim, ylim=ylim )
plot( zz[[3]], add=T, col="red")
for (i in 1:length(zz[[2]])) {
d_ij = gDistance( zz[[2]][i], zz[[3]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[2]]@coords[i,1], zz[[2]]@coords[i,2], zz[[3]]@coords[short_idx,1], zz[[3]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[4]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = c()
for (j in 1:length(zz[[2]])) {
d_ij[j] = gDistance( zz[[1]][i], zz[[2]][j], byid=T )
}
#d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[2]]@coords[short_idx,1], zz[[2]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = c()
for (j in 1:length(zz[[2]])) {
d_ij[j] = gDistance( zz[[1]][i], zz[[2]][j], byid=T )
}
#d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[2]]@coords[short_idx,1], zz[[2]]@coords[short_idx,2], col=alpha( "blue", 0.1) )
}
xlim = c(min(zz[[1]]@bbox[1,1], zz[[4]]@bbox[1,1]), max(zz[[1]]@bbox[1,2], zz[[4]]@bbox[1,2]))
ylim = c(min(zz[[1]]@bbox[2,1], zz[[4]]@bbox[2,1]), max(zz[[1]]@bbox[2,2], zz[[4]]@bbox[2,2]))
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
for (i in 1:length(zz[[1]])) {
d_ij = c()
for (j in 1:length(zz[[2]])) {
d_ij[j] = gDistance( zz[[1]][i], zz[[2]][j], byid=T )
}
#d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[1]]@coords[i,1], zz[[1]]@coords[i,2], zz[[2]]@coords[short_idx,1], zz[[2]]@coords[short_idx,2], col=alpha( "blue", 1) )
}
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
for (i in 1:length(zz[[2]])) {
d_ij = c()
for (j in 1:length(zz[[1]])) {
d_ij[j] = gDistance( zz[[1]][i], zz[[2]][j], byid=T )
}
#d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[2]]@coords[i,1], zz[[2]]@coords[i,2], zz[[1]]@coords[short_idx,1], zz[[1]]@coords[short_idx,2], col=alpha( "blue", 1) )
}
plot( zz[[1]], xlim=xlim, ylim=ylim )
plot( zz[[2]], add=T, col="red")
for (i in 1:length(zz[[2]])) {
d_ij = c()
for (j in 1:length(zz[[1]])) {
d_ij[j] = gDistance( zz[[2]][i], zz[[1]][j], byid=T )
}
#d_ij = gDistance( zz[[1]][i], zz[[4]], byid=T )
print(d_ij)
short_idx = which.min( d_ij )
print(short_idx)
segments( zz[[2]]@coords[i,1], zz[[2]]@coords[i,2], zz[[1]]@coords[short_idx,1], zz[[1]]@coords[short_idx,2], col=alpha( "blue", 1) )
}
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
?gSimplify
p = readWKT(paste("POLYGON((0 40,10 50,0 60,40 60,40 100,50 90,60 100,60",
"60,100 60,90 50,100 40,60 40,60 0,50 10,40 0,40 40,0 40))"))
l = readWKT("LINESTRING(0 7,1 6,2 1,3 4,4 1,5 7,6 6,7 4,8 6,9 4)")
par(mfrow=c(2,4))
plot(p);title("Original")
plot(gSimplify(p,tol=10));title("tol: 10")
plot(gSimplify(p,tol=20));title("tol: 20")
plot(gSimplify(p,tol=25));title("tol: 25")
plot(l);title("Original")
plot(gSimplify(l,tol=3));title("tol: 3")
plot(gSimplify(l,tol=5));title("tol: 5")
plot(gSimplify(l,tol=7));title("tol: 7")
par(mfrow=c(1,1))
source('~/projects/geosse_dating/data/emp/anolis/shapefiles/make_scores.R', echo=TRUE)
shp_nr9_info$gm_min_dist
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
write_data(shp_nr9_info, paste0(fp, "anolis_nr9"))
setwd("~/projects/geosse_dating/data/emp/anolis/shapefiles")
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
write_data(shp_nr9_info, paste0(fp, "anolis_nr9"))
shp_nr9_info$gm_min_dist
write_data = function(x, file_prefix) {
n = names(x)
for (i in 1:length(x)) {
xx = t(x[[ n[i] ]])
z = data.frame( xx )
z = round(z, digits=3)
fn = paste0( file_prefix, ".", n[i], ".txt" )
print(fn)
write.table( z, file=fn, sep=",", quote=F, row.names=F )
}
}
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
write_data(shp_nr9_info, paste0(fp, "anolis_nr9"))
shp_nr9_info$gm_min_dist
write_data = function(x, file_prefix) {
n = names(x)
for (i in 1:length(x)) {
xx = x[[ n[i] ]]
z = data.frame( xx )
z = round(z, digits=3)
fn = paste0( file_prefix, ".", n[i], ".txt" )
print(fn)
write.table( z, file=fn, sep=",", quote=F, row.names=F )
}
}
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
write_data(shp_nr9_info, paste0(fp, "anolis_nr9"))
shp_nr9_info$area
shp_nr9_info$area
matrix(shp_nr9_info$area)
shp_nr9_info$area
data.frame(shp_nr9_info$area)
data.frame(shp_nr9_info$gm_min_dist)
data.frame(shp_nr9_info$area)
dim(shp_nr9_info$area)
dim(shp_nr9_info$gm_min_dist)
shp_nr9_info$area
matrix( shp_nr9_info$area, nrow=1 )
matrix( shp_nr9_info$area, nrow=1, colnames=names(shp_nr9_info$area) )
matrix( shp_nr9_info$area, nrow=1, col.names=names(shp_nr9_info$area) )
array( shp_nr9_info$area, nrow=1, col.names=names(shp_nr9_info$area) )
matrix( shp_nr9_info$area, nrow=1, names=names(shp_nr9_info$area) )
?matrix
matrix( shp_nr9_info$area, nrow=1 )
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
tmp = matrix( shp_nr9_info$area, nrow=1 ); colnames(tmp) = name_nr9
tmp
names(shp_nr9_info)
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
shp_nr9_info2 = shp_nr9_info
shp_nr9_info$area = matrix( shp_nr9_info$area, nrow=1 ); colnames(shp_nr9_info$area) = name_nr9
shp_nr9_info$perimeter = matrix( shp_nr9_info$perimeter, nrow=1 ); colnames(shp_nr9_info$perimeter) = name_nr9
#write_data(shp_island_info, paste0(fp, "anolis_island"))
#write_data(shp_cont_info, paste0(fp, "anolis_cont"))
shp_nr9_info2 = shp_nr9_info
shp_nr9_info$area = matrix( shp_nr9_info$area, nrow=1 ); colnames(shp_nr9_info$area) = name_nr9
shp_nr9_info$perimeter = matrix( shp_nr9_info$perimeter, nrow=1 ); colnames(shp_nr9_info$perimeter) = name_nr9
shp_nr9_info$area_to_perimeter = matrix( shp_nr9_info$area_to_perimeter, nrow=1 ); colnames(shp_nr9_info$area_to_perimeter) = name_nr9
write_data(shp_nr9_info, paste0(fp, "anolis_nr9"))
